// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PracticeAPI.Context;

#nullable disable

namespace PracticeAPI.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    partial class ApplicationDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PracticeAPI.Model.CollegeStudent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("collegeStudents", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "123 Elm Street",
                            Age = 22,
                            DOB = new DateTime(2001, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "anmol@example.com",
                            Mobile = "7289874520",
                            Name = "Anmol"
                        },
                        new
                        {
                            Id = 2,
                            Address = "456 Oak Avenue",
                            Age = 21,
                            DOB = new DateTime(2002, 3, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "abhi@example.com",
                            Mobile = "9989874520",
                            Name = "Abhi"
                        },
                        new
                        {
                            Id = 3,
                            Address = "789 Pine Boulevard",
                            Age = 28,
                            DOB = new DateTime(1995, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "neeru@example.com",
                            Mobile = "8989874520",
                            Name = "Neeru"
                        },
                        new
                        {
                            Id = 4,
                            Address = "321 Maple Lane",
                            Age = 30,
                            DOB = new DateTime(1993, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "akriti@example.com",
                            Mobile = "8889874520",
                            Name = "Akriti"
                        },
                        new
                        {
                            Id = 5,
                            Address = "987 Willow Drive",
                            Age = 6,
                            DOB = new DateTime(2017, 6, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "pari@example.com",
                            Mobile = "6889874520",
                            Name = "Pari"
                        });
                });

            modelBuilder.Entity("PracticeAPI.Model.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("collegeDepartments", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DepartmentName = "Computer Science",
                            Description = "Focuses on programming, algorithms, and software development."
                        },
                        new
                        {
                            Id = 2,
                            DepartmentName = "Mechanical Engineering",
                            Description = "Deals with design, construction, and mechanics of machines."
                        },
                        new
                        {
                            Id = 3,
                            DepartmentName = "Civil Engineering",
                            Description = "Specializes in infrastructure design and construction."
                        },
                        new
                        {
                            Id = 4,
                            DepartmentName = "Electrical Engineering",
                            Description = "Covers electrical systems, electronics, and power generation."
                        },
                        new
                        {
                            Id = 5,
                            DepartmentName = "Mathematics",
                            Description = "Focuses on theoretical and applied mathematics."
                        },
                        new
                        {
                            Id = 6,
                            DepartmentName = "Physics",
                            Description = "Explores principles of matter, energy, and their interactions."
                        });
                });

            modelBuilder.Entity("PracticeAPI.Model.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("Isdeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("PracticeAPI.Model.RolePrivilage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("RolePrivilegeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePrivilages", (string)null);
                });

            modelBuilder.Entity("PracticeAPI.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CretedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserTypeId");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("PracticeAPI.Model.UserImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserImages", (string)null);
                });

            modelBuilder.Entity("PracticeAPI.Model.UserRoleMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex(new[] { "UserId", "RoleId" }, "UK_UserMapping")
                        .IsUnique();

                    b.ToTable("UserRoleMappings", (string)null);
                });

            modelBuilder.Entity("PracticeAPI.Model.UserType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1500)
                        .HasColumnType("nvarchar(1500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("UserTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Test Student",
                            Name = "Student"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Test Parent",
                            Name = "Parent"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Test Faculty",
                            Name = "Faculty"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Test Description",
                            Name = "Supporting Staff"
                        });
                });

            modelBuilder.Entity("PracticeAPI.Model.CollegeStudent", b =>
                {
                    b.HasOne("PracticeAPI.Model.Department", "department")
                        .WithMany("studentsList")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("FK_Students_Department");

                    b.Navigation("department");
                });

            modelBuilder.Entity("PracticeAPI.Model.RolePrivilage", b =>
                {
                    b.HasOne("PracticeAPI.Model.Role", "role")
                        .WithMany("rolePrivilages")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_RolePrivilages_Role");

                    b.Navigation("role");
                });

            modelBuilder.Entity("PracticeAPI.Model.User", b =>
                {
                    b.HasOne("PracticeAPI.Model.UserType", "userType")
                        .WithMany("users")
                        .HasForeignKey("UserTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Users_UserType");

                    b.Navigation("userType");
                });

            modelBuilder.Entity("PracticeAPI.Model.UserRoleMapping", b =>
                {
                    b.HasOne("PracticeAPI.Model.Role", "Role")
                        .WithMany("userRoleMappings")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UserRoleMapping_Role");

                    b.HasOne("PracticeAPI.Model.User", "User")
                        .WithMany("userRoleMappings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UserRoleMapping_User");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PracticeAPI.Model.Department", b =>
                {
                    b.Navigation("studentsList");
                });

            modelBuilder.Entity("PracticeAPI.Model.Role", b =>
                {
                    b.Navigation("rolePrivilages");

                    b.Navigation("userRoleMappings");
                });

            modelBuilder.Entity("PracticeAPI.Model.User", b =>
                {
                    b.Navigation("userRoleMappings");
                });

            modelBuilder.Entity("PracticeAPI.Model.UserType", b =>
                {
                    b.Navigation("users");
                });
#pragma warning restore 612, 618
        }
    }
}
